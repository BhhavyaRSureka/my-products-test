// Test generated by RoostGPT for test ReatAssured-Test using AI Type Open AI and AI Model gpt-4


// Test generated for /GetTransactions_post for http method type POST in rest-assured framework


// RoostTestHash=207beafabe


package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GetTransactionsPostTest {
  
    @Test  
    public void GetTransactions_post_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/GetTransactionsPostTest.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
                
  
                Response response = given()
				.pathParam("koreUserId", map.get("koreUserId") != null ? map.get("koreUserId") : "")
				.pathParam("botId", map.get("botId") != null ? map.get("botId") : "")
				.pathParam("accountId", map.get("accountId") != null ? map.get("accountId") : "")
				.pathParam("Authorization", map.get("Authorization") != null ? map.get("Authorization") : "")
				.pathParam("X-Auth-token", map.get("X-Auth-token") != null ? map.get("X-Auth-token") : "")
				.pathParam("X-CORRELATION-ID", map.get("X-CORRELATION-ID") != null ? map.get("X-CORRELATION-ID") : "")
				.contentType(ContentType.JSON)
				.body("{\n"+
					"  \"customerId\": \"" + (map.get("customerId") != null ? map.get("customerId") : "") + "\",\n" +
					"  \"accountNumber\": \"" + (map.get("accountNumber") != null ? map.get("accountNumber") : "") + "\",\n" +
					"  \"numOfTransactions\": \"" + (map.get("numOfTransactions") != null ? map.get("numOfTransactions") : "") + "\",\n" +
					"  \"status\": \"" + (map.get("status") != null ? map.get("status") : "") + "\",\n" +
					"  \"startDate\": \"" + (map.get("startDate") != null ? map.get("startDate") : "") + "\",\n" +
					"  \"endDate\": \"" + (map.get("endDate") != null ? map.get("endDate") : "") + "\",\n" +
					"  \"sort\": \"" + (map.get("sort") != null ? map.get("sort") : "") + "\",\n" +
					"  \"transactionAmount\": \"" + (map.get("transactionAmount") != null ? map.get("transactionAmount") : "") + "\",\n" +
					"  \"category\": \"" + (map.get("category") != null ? map.get("category") : "") + "\",\n" +
					"  \"debitOrCredit\": \"" + (map.get("debitOrCredit") != null ? map.get("debitOrCredit") : "") + "\n" +
 				"}")
				.header("Authorization", "Bearer " + System.getenv("BEARER_TOKEN"))
                .when()
                .post("/GetTransactions")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: successful operation");
    
              if (response.jsonPath().get("customerId") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("customerId"), instanceOf(Integer.class));  
          }
    
              if (response.jsonPath().get("transactionId") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("transactionId"), instanceOf(Integer.class));  
          }
    
              if (response.jsonPath().get("accountNumber") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accountNumber"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("timestamp") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("timestamp"), instanceOf(Integer.class));  
          }
    
              if (response.jsonPath().get("amount") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("amount"), instanceOf(Integer.class));  
          }
    
              if (response.jsonPath().get("currency") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("currency"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("debitOrCredit") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("debitOrCredit"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("description") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("paymentMode") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("paymentMode"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("DBANames") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("DBANames"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("status") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("status"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("closingBalance") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("closingBalance"), instanceOf(Integer.class));  
          }
    
              if (response.jsonPath().get("transacitonType") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("transacitonType"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("ACHCode") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("ACHCode"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("MCCCode") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("MCCCode"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("SICCode") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("SICCode"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("name") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("name"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("address") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("address"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("street") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("street"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("city") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("city"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("state") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("state"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("zip") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("zip"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("country") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("country"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("phoneNumber") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("phoneNumber"), instanceOf(Integer.class));  
          }
    
              if (response.jsonPath().get("metaInfo") != null) {    
                for (int i = 0; i < response.jsonPath().getList("metaInfo").size(); i++) {    
              if (response.jsonPath().get("metaInfo[`"+ i +"`].name") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("metaInfo[`"+ i +"`].name"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("metaInfo[`"+ i +"`].value") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("metaInfo[`"+ i +"`].value"), instanceOf(String.class));  
          }
    
                  }  
                MatcherAssert.assertThat(response.jsonPath().getList("metaInfo"), instanceOf(List.class));
  
          }
				}
  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
}
