/*
Test generated by RoostGPT for test Bhhavya-Gherkin using AI Type Open AI and AI Model gpt-4

{
  background: null,
  rule: null,
  scenario: 'Create a new product\r\n' +
    '        Given the client provides the following product data:\r\n' +
    '            | name         | description             | price |\r\n' +
    '            | Test Product | This is a test product. | 10.0  |\r\n' +
    '        When the client sends a POST request to "/api/products"\r\n' +
    '        Then the saved product should not be null and its properties must correspond to those provided by client',
  title: 'Create a new product'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class createANewProductTest {

    @Test
    public void createANewProduct() {
        // Define the base URL
        RestAssured.baseURI = System.getenv("ROOST_SERVER_URL") + "/api";

        // Define the request payload
        String payload = "{\n" +
                "  \"name\": \"Test Product\",\n" +
                "  \"description\": \"This is a test product.\",\n" +
                "  \"price\": 10.0\n" +
                "}";

        // Send POST request and validate the response
        given()
            .contentType(ContentType.JSON)
            .body(payload)
            .when()
            .post("/products")
            .then()
            .statusCode(200)
            .body("name", equalTo("Test Product"))
            .body("description", equalTo("This is a test product."))
            .body("price", equalTo(10.0f))
            .body("id", notNullValue());
    }
}
