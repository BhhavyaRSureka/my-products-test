# Test generated by RoostGPT for test ArtilleryTest1 using AI Type Open AI and AI Model gpt-4


# Test generated for /GetScheduleTransfers_post for http method type POST in artillery framework

# RoostTestHash=7b4d2d87f9


config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 20
  plugins:
    expect: {}
  payload:
    path: "GetScheduleTransfers_post_others.csv"
    fields:
      - "customerId"
      - "status"
    skipHeader: true

scenarios:
  - name: "Non-success API response tests"
    flow:
      - log: "Making a POST request with invalid headers"
        post:
          url: "/GetScheduleTransfers"
          headers:
            koreUserId: "invalid"
            botId: "invalid"
            userCode: "invalid"
            accountId: "invalid"
            Authorization: "Bearer {{$processEnvironment.AUTH_TOKEN}}"
          json:
            customerId: "{{ customerId }}"
            status: "{{ status }}"
          expect:
            - statusCode: 401
            - hasProperty: "message"
            - equals: ["message", "Unauthorized"]
        think: 1

      - log: "Making a POST request with missing required fields in the payload"
        post:
          url: "/GetScheduleTransfers"
          headers:
            koreUserId: "valid"
            botId: "valid"
            userCode: "valid"
            accountId: "valid"
            Authorization: "Bearer {{$processEnvironment.AUTH_TOKEN}}"
          json:
            status: "{{ status }}"
          expect:
            - statusCode: 400
            - hasProperty: "message"
            - equals: ["message", "Bad request"]
        think: 1

      - log: "Making a POST request to an invalid URL"
        post:
          url: "/InvalidURL"
          headers:
            koreUserId: "valid"
            botId: "valid"
            userCode: "valid"
            accountId: "valid"
            Authorization: "Bearer {{$processEnvironment.AUTH_TOKEN}}"
          json:
            customerId: "{{ customerId }}"
            status: "{{ status }}"
          expect:
            - statusCode: 404
            - hasProperty: "message"
            - equals: ["message", "Not found"]
        think: 1
